<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Google.Protobuf.Reflection" #>
//Generated by TurboLink CodeGenerator, do not edit!
#include "<#=s.CamelFileName#>Context.h"
#include "<#=s.TurboLinkBasicFileName#>Client.h"
#include "<#=s.CamelFileName#>Service_Private.h"
#include "<#=s.CamelFileName#>Marshaling.h"
<#
foreach(String dependency in s.DependencyFiles)
{
#>
#include "<#=dependency#>Marshaling.h"
<#
}
#>
#include "TurboLinkGrpcManager.h"
<#
foreach(GrpcService service in s.ServiceArray)
{
	foreach (GrpcServiceMethod method in service.MethodArray)
	{
#>

GrpcContext_<#=service.Name#>_<#=method.Name#>::GrpcContext_<#=service.Name#>_<#=method.Name#>(const FGrpcContextHandle& _Handle, UGrpcService* _Service, UGrpcClient* _Client)
	: Super(_Handle, _Service, _Client)
{
}

<#if(method.ClientStreaming && method.ServerStreaming) { #>
void GrpcContext_<#=service.Name#>_<#=method.Name#>::Init()
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	U<#=service.Name#>* service = (U<#=service.Name#>*)Service;
	RpcReaderWriter = service->d->Stub->Async<#=method.Name#>(RpcContext.get(), service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_<#=service.Name#>_<#=method.Name#>::Call(const <#=method.InputType#>& Request)
{
	<#=method.GrpcInputType#> rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	if (bCanSend) {
		RpcReaderWriter->Write(rpcRequest, WriteTag);
		bCanSend = false;
	}
	else {
		SendQueue.push_back(rpcRequest);
	}
}

<# }else if(method.ClientStreaming && !method.ServerStreaming) { #>
void GrpcContext_<#=service.Name#>_<#=method.Name#>::Init()
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	U<#=service.Name#>* service = (U<#=service.Name#>*)Service;
	RpcReaderWriter = service->d->Stub->Async<#=method.Name#>(RpcContext.get(), &(Super::RpcResponse), service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

void GrpcContext_<#=service.Name#>_<#=method.Name#>::Call(const <#=method.InputType#>& Request)
{
	<#=method.GrpcInputType#> rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	if (bCanSend) {
		RpcReaderWriter->Write(rpcRequest, WriteTag);
		bCanSend = false;
	}
	else {
		SendQueue.push_back(rpcRequest);
	}
}

void GrpcContext_<#=service.Name#>_<#=method.Name#>::Stop()
{
	RpcReaderWriter->WritesDone(WriteTag);
	bWritesDone = true;
}

<# } else if(!method.ClientStreaming && method.ServerStreaming) { #>
void GrpcContext_<#=service.Name#>_<#=method.Name#>::Call(const <#=method.InputType#>& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	<#=method.GrpcInputType#> rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	U<#=service.Name#>* service = (U<#=service.Name#>*)Service;
	RpcReaderWriter = service->d->Stub->Async<#=method.Name#>(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get(), InitialTag);
}

<#} else {#>
void GrpcContext_<#=service.Name#>_<#=method.Name#>::Call(const <#=method.InputType#>& Request)
{
	check(GetState() == EGrpcContextState::Ready);
	UpdateState(EGrpcContextState::Initialing);

	<#=method.GrpcInputType#> rpcRequest;
	TURBOLINK_TO_GRPC(&Request, &rpcRequest);

	U<#=service.Name#>* service = (U<#=service.Name#>*)Service;
	RpcReaderWriter = service->d->Stub->Async<#=method.Name#>(RpcContext.get(), rpcRequest, service->TurboLinkManager->d->CompletionQueue.get());
	RpcReaderWriter->ReadInitialMetadata(InitialTag);
}

<#}#>
void GrpcContext_<#=service.Name#>_<#=method.Name#>::OnRpcEvent(bool Ok, const void* EventTag)
{
	Super::OnRpcEventInternal(Ok, EventTag,
		[this](const FGrpcResult& _Result, <#=method.GrpcOutputType#>* _RpcResponse)
		{
			U<#=service.Name#>Client* client = (U<#=service.Name#>Client*)(this->Client);
			const bool bBound = client->On<#=method.Name#>Response.IsBound();
			const bool bBoundNative = client->On<#=method.Name#>ResponseNative.IsBound();
			if (bBound || bBoundNative) {
				<#=method.OutputType#> response;
				if (_RpcResponse) {
					GRPC_TO_TURBOLINK(_RpcResponse, &response);
				}
	<#if(method.ServerStreaming) {#>
				if (bBound) client->On<#=method.Name#>Response.Broadcast(Handle, _Result, _RpcResponse == nullptr, response);
				if (bBoundNative) client->On<#=method.Name#>ResponseNative.Broadcast(Handle, _Result, _RpcResponse == nullptr, response);
	<#} else {#>
				if (bBound) client->On<#=method.Name#>Response.Broadcast(Handle, _Result, response);
				if (bBoundNative) client->On<#=method.Name#>ResponseNative.Broadcast(Handle, _Result, response);
	<#}#>
			}
			if (_Result.Code != EGrpcResultCode::Ok && client->GetService()) client->GetService()->OnServiceGrpcError.Broadcast(_Result);
		}
<#if(method.ClientStreaming) {#>
		, [this]()
		{
			U<#=service.Name#>Client* client = (U<#=service.Name#>Client*)(this->Client);
			if ((client->On<#=method.Name#>WriteComplete.IsBound())) client->On<#=method.Name#>WriteComplete.Broadcast(Handle);
			if ((client->On<#=method.Name#>WriteCompleteNative.IsBound())) client->On<#=method.Name#>WriteCompleteNative.Broadcast(Handle);
		}
<#}#>
	);
}
<#
	}
}
#>